// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL")
  relationMode = "prisma"
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  books Book[]

  // Next-Auth specific relations
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  alias        String
  type         AccountType
  transactions Transaction[]

  // Broker specific fields
  brokerId        String
  Broker          Broker @relation(fields: [brokerId], references: [id])
  brokerAccountId String

  // User specific fields
  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Position Position[]

  // Indexes
  @@index([userId])
  @@index([brokerId, brokerAccountId], name: "broker_account_id")
}

model Broker {
  id   String @id @default(cuid())
  name String

  transactions Transaction[]
  books        Book[]
}

model Transaction {
  id String @id @default(cuid())

  transactionDate DateTime
  description     String
  quantity        Int
  symbol          String
  price           Float
  commission      Float
  amount          Float
  fees            Float

  // Broker specific fields
  brokerId            String
  brokerTransactionId String
  brokerAccountId     String

  broker Broker  @relation(fields: [brokerId], references: [id])
  Book   Book?   @relation(fields: [bookId], references: [id])
  bookId String?

  openPosition  Position[] @relation(name: "openPosition")
  closePosition Position[] @relation(name: "closePosition")

  @@index([brokerId, brokerTransactionId], name: "broker_transaction_id")
  @@index([bookId])
}

model Position {
  id String @id @default(cuid())

  ticker          String
  positionSize    Int
  openedAt        DateTime
  closedAt        DateTime
  openPrice       Float
  closePrice      Float
  positionBalance Float
  orderType       OrderType

  openTransaction    Transaction? @relation(name: "openPosition", fields: [openTransactionId], references: [id])
  closeTransaction   Transaction? @relation(name: "closePosition", fields: [closeTransactionId], references: [id])
  openTransactionId  String?
  closeTransactionId String?

  bookId String
  Book   Book   @relation(fields: [bookId], references: [id])

  @@index([bookId])
  @@index([ticker])
  @@index([openTransactionId])
  @@index([closeTransactionId])
}

enum AccountType {
  PAPER
  LIVE
}

enum OrderType {
  BUY
  SELL
  PUT
  CALL
}
